{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/CartoonCard/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Title","CartoonCard","onClick","handleIncrement","aria-label","alt","id","src","image","Score","state","cartoons","score","_this","setState","baseState","_this2","this","map","cartoon","components_CartoonCard","key","React","Component","App","components_Wrapper","components_Title","components_Score","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+pEAuBeA,MApBf,SAAiBC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,SAC9BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAEbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sCAAhB,kBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,yBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,wFAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BCVRE,MAJf,SAAeN,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMK,wBCSvBE,MAVf,SAAqBP,GACjB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,QAAMK,QAASR,EAAMS,gBAAiBC,aAAW,aAAaN,UAAU,cAAaH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,GAAIC,IAAKb,EAAMc,YCwCrHC,oNAvCbC,MAAQ,CACNC,WACAC,MAAO,KAITT,gBAAkB,WAEdU,EAAKC,SAAS,CAAEF,MAAOC,EAAKH,MAAME,MAAQ,IAC1CC,EAAKE,UAAYF,EAAKH,+EASjB,IAAAM,EAAAC,KACP,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAAb,UAAkDmB,KAAKP,MAAME,QAE9DK,KAAKP,MAAMC,SAASO,IAAI,SAAAC,GAAO,OAC9BxB,EAAAC,EAAAC,cAACuB,EAAD,CACER,MAAOI,EAAKN,MAAME,MAClBT,gBAAiBa,EAAKb,gBAEtBG,GAAIa,EAAQb,GACZe,IAAKF,EAAQb,GACbE,MAAOW,EAAQX,kBAjCPc,IAAMC,YC+BXC,oNAxBXd,MAAQ,CACNC,oFAcF,OACEhB,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,0CACA/B,EAAAC,EAAAC,cAAC8B,EAAD,cAvBUJ,cCIEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7ce8f19f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <div className=\"wrapper\">{props.children}\r\n      <div className=\"container-fluid\">\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n          {/* <span className=\"navbar-brand mb-0 h1 title\"></span> */}\r\n          <span className=\"navbar-brand mb-0 h1 guessResponse\">Correct/Wrong</span>\r\n          {/* <span className=\"navbar-brand mb-0 h1 score\">Score: {this.state.score}</span> */}\r\n        </nav>\r\n        <div className=\"jumbotron jumbotron-fluid\"></div>\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">Welcome to Dimmsdale!</h1>\r\n          <p className=\"lead\">Click on a character to earn points. But don't click on a character more than once.</p>\r\n        </div>\r\n        <div className=\"card-container\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CartoonCard(props) {\n    return (\n        <span className=\"card\">\n            <div className=\"img-container\">\n                <span onClick={props.handleIncrement} aria-label=\"click item\" className=\"click-item\"><img alt={props.id} src={props.image} /></span>\n            </div>\n        </span>\n    );\n}\n\nexport default CartoonCard;","import React from \"react\";\nimport CartoonCard from \"../CartoonCard\";\nimport cartoons from \"../../cartoons.json\"\nimport \"./style.css\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Score extends React.Component {\n  // Setting the initial state of the Counter component\n  state = {\n    cartoons,\n    score: 0\n  };\n\n  // handleIncrement increases this.state.score by 1\n  handleIncrement = () => {\n      // We always use the setState method to update a component's state\n      this.setState({ score: this.state.score + 1 })\n      this.baseState = this.state;\n  }\n   \n  // gameOver = () => {\n  //   this.setState(this.baseState)\n  // }\n  \n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"body\">\n        <div className=\"score-body\">\n          <p className=\"navbar-brand mb-0 h1 score\">Score: {this.state.score}</p>\n        </div>\n        {this.state.cartoons.map(cartoon => (\n          <CartoonCard\n            score={this.state.score}\n            handleIncrement={this.handleIncrement}\n            // gameOver={this.gameOver}\n            id={cartoon.id}\n            key={cartoon.id}\n            image={cartoon.image}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\n//import CartoonCard from \"./components/CartoonCard\";\nimport cartoons from \"./cartoons.json\";\nimport Score from \"./components/Score\";\nimport './App.css';\n\nclass App extends Component {\n  //state = {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n    state = {\n      cartoons,\n      // score: 0\n      //   newArray: []\n    // }\n  }\n  //}\n\n  // shuffleCartoon = cartoon => {\n\n  //   const cartoons = this.state.cartoons.map(cartoon => cartoon);\n  //   this.setState({ cartoons });\n  // };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Click Memory | Fairly Odd Parents</Title>\n        <Score></Score>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}