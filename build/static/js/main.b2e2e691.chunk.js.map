{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/CartoonCard/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Title","CartoonCard","onClick","handleClick","id","aria-label","alt","src","image","Score","state","guessResponse","topScore","cartoons","score","shuffleArray","j","x","i","length","Math","floor","random","isCorrect","searchArray","_this","map","cartoon","clicked","correctGuess","console","log","incorrectGuess","cartoonData","_this$state","setState","resetArray","Object","objectSpread","_this$state2","_this2","this","components_CartoonCard","key","React","Component","App","components_Wrapper","components_Title","components_Score","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2e2e691.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"wrapper\">{props.children}\n      <div className=\"container-fluid\">\n        <nav className=\"navbar navbar-dark bg-dark\">\n          {/* <span className=\"navbar-brand mb-0 h1 title\"></span> */}\n          {/* <span className=\"navbar-brand mb-0 h1 guessResponse\">{this.state.guessResponse}</span> */}\n          {/* <span className=\"navbar-brand mb-0 h1 score\">Score: {this.state.score}</span> */}\n        </nav>\n        <div className=\"jumbotron jumbotron-fluid\"></div>\n        <div className=\"container\">\n          <h1 className=\"display-4\">Welcome to Dimmsdale!</h1>\n          <p className=\"lead\">Click on a character to earn points. But don't click on a character more than once.</p>\n        </div>\n        <div className=\"card-container\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CartoonCard(props) {\n    return (\n        <span className=\"card\">\n            <div className=\"img-container\">\n                <span onClick={()=>props.handleClick(props.id)} aria-label=\"click item\" className=\"click-item\"><img alt={props.id} src={props.image} /></span>\n            </div>\n        </span>\n    );\n}\n\nexport default CartoonCard;","import React from \"react\";\nimport CartoonCard from \"../CartoonCard\";\nimport cartoons from \"../../cartoons.json\"\nimport \"./style.css\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Score extends React.Component {\n  // Setting the initial state of the Counter component\n  state = {\n    guessResponse: \"\",\n    topScore: 0,\n    cartoons,\n    score: 0\n  };\n\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  handleClick = (id) => {\n    let isCorrect = false;\n    const searchArray = this.state.cartoons.map(cartoon => {\n      if (id === cartoon.id) {\n        if (cartoon.clicked === false) {\n          cartoon.clicked = true;\n          isCorrect = true;\n          //Do stuff related to correct guess\n        }\n      }\n      return cartoon;\n    })\n    if (isCorrect) {\n      this.correctGuess(searchArray)\n      console.log(\"correct guess\");\n    } else {\n      this.incorrectGuess(searchArray)\n      console.log(\"incorrect guess\");\n    }\n  }\n\n  correctGuess = (cartoonData) => {\n    const { topScore, score, } = this.state\n    this.setState({ score: score + 1, guessResponse: \"Correct!\", topScore: this.state.score + 1, cartoons: this.shuffleArray(cartoonData) })\n  }\n\n  incorrectGuess = (cartoonData) => {\n    let resetArray = cartoonData.map(cartoon => ({ ...cartoon, clicked: false }))\n     const {topScore, score} = this.state\n    this.setState({ score: 0, guessResponse: \"Incorrect!\", cartoons: this.shuffleArray(resetArray) })\n    if(topScore > score) {\n      this.setState({topScore: topScore + this.state.score});\n    }\n  }\n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"body\">\n        <div className=\"score-body\">\n          <span className=\"navbar-brand mb-0 h1 guessResponse\">{this.state.guessResponse}</span>\n          <p className=\"navbar-brand mb-0 h1 score\">Score: {this.state.score} | Top Score: {this.state.topScore}</p>\n        </div>\n        {this.state.cartoons.map(cartoon => (\n          <CartoonCard\n            score={this.state.score}\n            handleClick={this.handleClick}\n            id={cartoon.id}\n            key={cartoon.id}\n            image={cartoon.image}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Score;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\n//import CartoonCard from \"./components/CartoonCard\";\nimport cartoons from \"./cartoons.json\";\nimport Score from \"./components/Score\";\nimport './App.css';\n\nclass App extends Component {\n  //state = {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n    state = {\n      cartoons,\n      // score: 0\n      //   newArray: []\n    // }\n  }\n  //}\n\n  // shuffleCartoon = cartoon => {\n\n  //   const cartoons = this.state.cartoons.map(cartoon => cartoon);\n  //   this.setState({ cartoons });\n  // };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Click Memory | Fairly Odd Parents</Title>\n        <Score></Score>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}